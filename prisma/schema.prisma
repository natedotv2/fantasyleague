generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// AUTH MODELS
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  userName         String?   @unique
  email            String?   @unique
  emailVerified    Boolean?
  verificationCode Int?
  birthDate        String?
  country          String?
  province         String?
  image            String?
  admin            Boolean   @default(false)
  accounts         Account[]
  sessions         Session[]
  Wallet           Wallet[]
  walletkey        String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// FANTASY MODELS

model League {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  draftTime    String
  startDate    String
  endDate      String
  duration     Int?           @db.Int
  buyIn        String?        @db.VarChar(255)
  buyInFee     Int?           @db.Int
  inviteOnly   String
  inviteCode   String?        @db.VarChar(255)
  owner        String
  maxPlayers   Int
  minPlayers   Int
  points       Int?
  region       String
  teams        Teams[]
  players      Players[]
  fixtures     Fixture[]
  members      Participant[]
  Draft        Draft[]
  PlayerResult PlayerResult[]
  TeamResult   TeamResult[]
}

model Teams {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  slug     String? @db.VarChar(255)
  top      String  @db.VarChar(100)
  jungle   String  @db.VarChar(100)
  mid      String  @db.VarChar(100)
  adc      String  @db.VarChar(100)
  support  String  @db.VarChar(100)
  points   Int     @db.Int
  leagueId Int?
  League   League? @relation(fields: [leagueId], references: [id])
  selected Boolean @default(false)
}

model Players {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  slug     String?  @db.VarChar(255)
  team     String?  @db.VarChar(100)
  position String   @db.VarChar(100)
  points   Int?     @db.Int
  leagueId Int?
  League   League?  @relation(fields: [leagueId], references: [id])
  selected Boolean? @default(false)
}

model Participant {
  id          Int     @id @default(autoincrement())
  username    String  @db.VarChar(255)
  top         String? @db.VarChar(100)
  jungle      String? @db.VarChar(100)
  mid         String? @db.VarChar(100)
  adc         String? @db.VarChar(100)
  support     String? @db.VarChar(100)
  team        String? @db.VarChar(100)
  points      Int?    @db.Int
  draftOrder  Int?    @db.Int
  leaguename  String? @db.VarChar(255)
  leagueId    Int?
  userId      String?
  fantasyname String? @unique @db.VarChar(255)
  League      League? @relation(fields: [leagueId], references: [id])
  Draft       Draft?  @relation(fields: [draftName], references: [name])
  draftName   String?
}

model Fixture {
  id           Int     @id @default(autoincrement())
  MatchId      String
  DateTime_UTC String
  Team1        String
  Team2        String
  Tab          String
  leagueId     Int?
  League       League? @relation(fields: [leagueId], references: [id])
}

model Draft {
  name     String        @unique
  date     String?
  time     String?
  leagueId Int?
  members  Participant[]
  League   League?       @relation(fields: [leagueId], references: [id])
}

model PlayerResult {
  id             Int     @id @default(autoincrement())
  name           String
  team           String
  role           String
  creepScore     Int?
  visionScore    Int?
  kills          Int?
  deaths         Int?
  assists        Int?
  game           String
  teamTotalKills Int?
  points         Int?
  leagueId       Int?
  league         League? @relation(fields: [leagueId], references: [id])
  date           String?
  participantId  Int?
  playerId       Int?
  @@unique([name, game]) 
}

model TeamResult {
  id              Int      @id @default(autoincrement())
  name            String
  game            String
  teamKills       Int?
  dragonKills     Int?
  riftHeraldKills Int?
  turretKills     Int?
  inhibitorKills  Int?
  baronKills      Int?
  didWin          Boolean?
  points          Int?
  leagueId        Int?
  league          League?  @relation(fields: [leagueId], references: [id])
  date            String?
  teamId          Int?
  participantId   Int?

  @@unique([name, game])
}

model Wallet {
  id      Int    @id @default(autoincrement())
  balance Int
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  credits Int?

  Deposit    Deposit[]
  Withdrawal Withdrawal[]
}

model Deposit {
  id       Int    @id @default(autoincrement())
  amount   Int
  userId   String
  walletId Int
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date     String
  time     String
  txHash   String
  credits  Int
}

model Withdrawal {
  id       Int    @id @default(autoincrement())
  amount   Int
  userId   String
  walletId Int
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date     String
  time     String
  txHash   String @unique
  credits  Int
}
